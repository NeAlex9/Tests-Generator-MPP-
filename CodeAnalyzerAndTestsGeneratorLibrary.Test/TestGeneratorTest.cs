using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CodeAnalyzerAndTestGeneratorLibrary;
using CodeAnalyzerAndTestGeneratorLibrary.FileHolder;
using NUnit.Framework;
using FluentAssertions;

namespace CodeAnalyzerAndTestsGeneratorLibrary.Test
{
    [TestFixture]
    public class TestGeneratorTest
    {
        public static IEnumerable<TestCaseData> FileInfoProvider()
        {
            var code = @"using System;
            using NUnit.Framework;
            using Moq;
            using System.Collections.Generic;

            [TestFixture]
            class Example1Test
            {
        private Mock<IDisposable> _s;
        private Mock<ICloneable> _c;
        private Example1 _example1;
        [SetUp]
    public void SetUp()
    {
        var a = default (int);
        var str = default (string);
        _s = new Mock<IDisposable>();
        _c = new Mock<ICloneable>();
        _example1 = new Example1(_s.Object, _c.Object, a, str);
    }

    [Test]
    public void Function1()
    {
        var d = default (int);
        var e = default (int);
        var actual = _example1.Function1(d, e);
        var expected = default (int);
        Assert.That(actual, Is.EqualTo(expected));
        Assert.Fail(""autogenerated"");
    }

    [Test]
    public void Function2()
    {
        _example1.Function2();
        Assert.Fail(""autogenerated"");
    }
}
";
            var nameFileCodePair = new Dictionary<string, string>(){{ "Example1Test", code }, { "Example2Test", @"using System;
using NUnit.Framework;
using Moq;
using System.Collections.Generic;

[TestFixture]
class Example2Test
{
    private Example2 _example2;
    [SetUp]
    public void SetUp()
    {
        _example2 = new Example2();
    }

    [Test]
    public void Function1()
    {
        _example2.Function1();
        Assert.Fail(""autogenerated"");
    }

    [Test]
    public void Function2()
    {
        _example2.Function2();
        Assert.Fail(""autogenerated"");
    }
}" }};
            yield return new TestCaseData("Example1.cs", nameFileCodePair);

            nameFileCodePair = new Dictionary<string, string>() { { "Example3Test", @"using System;
using NUnit.Framework;
using Moq;
using System.Collections.Generic;

[TestFixture]
class Example3Test
{
    private Mock<IEnumerable<int>> _d;
    private Example3 _example3;
    [SetUp]
    public void SetUp()
    {
        _d = new Mock<IEnumerable<int>>();
        _example3 = new Example3(_d.Object);
    }

    [Test]
    public void Function1()
    {
        var a = default (int);
        var b = default (string);
        _example3.Function1(a, b);
        Assert.Fail(""autogenerated"");
    }

    [Test]
    public void Function2()
    {
        _example3.Function2();
        Assert.Fail(""autogenerated"");
    }
}" } };
            yield return new TestCaseData("Example3.cs", nameFileCodePair);
        }

        [Test, TestCaseSource(nameof(FileInfoProvider))]
        public void GetFileInfo_OneClassInFile_CorrectResult(string fileName, Dictionary<string, string> expexted)
        {
            var path = @"B:\BSUIR\3 course\5 sem\СПП\lab\Tests Generator(lab4)\Tests Generator(lab4)\FilesForTests\";
            using (var reader = new System.IO.StreamReader(path + fileName))
            {
                var content = reader.ReadToEnd();
                var fileInfo = CodeAnalyzer.GetFileInfo(content);
                var actual = TestsGenerator.GenerateTests(fileInfo);

                char[] escapeChars = new[] { ' ', '\n', '\t', '\r', '\f', '\v', '\\' };
                
                var s = actual.Select(elem => new KeyValuePair<string, string>(elem.Key, new string(elem.Value.Where(c => !escapeChars.Contains(c)).ToArray())));
                var d = expexted.Select(elem => new KeyValuePair<string, string>(elem.Key, new string(elem.Value.Where(c => !escapeChars.Contains(c)).ToArray())));
                s.Should().Equal(d);
            }
        }
    }
}
